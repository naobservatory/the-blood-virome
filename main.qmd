---
title: "Exploring Blood-Based Biosurveillance, Part 3: The Blood Virome (Code)"
subtitle: "Post pipeline analysis & figures"
author: "Harmon Bhasin"
date: 2025-01-28
format:
  html:
    toc: true 
    toc-title: "Table of contents" 
    number-sections: true 
    number-depth: 3 
    toc-location: right 
    page-layout: full 
    df-print: paged 
    fig-format: svg
editor: 
  visual: true
  render-on-save: false
comments:
  hypothesis: true 
execute: 
  echo: false
  warning: false
  freeze: auto
  cache: true
title-block-banner: "#de2d26"
---

# Load packages & settings
```{r}
#| label: load-packages

library(pacman)
pacman::p_load(tidyverse, RColorBrewer, scales, ggbeeswarm, ggpubr, grid, gridExtra, ggforce, extrafont, cowplot)

source("./scripts/aux_plot-theme.R")
theme_base <- theme_base + theme(aspect.ratio = NULL)
theme_kit <- theme_base + theme(
  axis.text.x = element_text(hjust = 1, angle = 45),
  axis.title.x = element_blank(),
  text = element_text(size = 12)
)
tnl <- theme(legend.position = "none")
```

```{r}
#| label: set-up-paths

# Data input paths
datasets <- c("cebriamendoza2021", "thijssen2023", "mengyi2023",  "aydillo2022","oconnell2023", "thompson2023")

formatted_datasets <- c("CebriÃ¡-Mendoza et al. (2021)", "Thijssen et al. (2023)", "Mengyi et al. (2023)", "Aydillo et al. (2022)","O'Connell (2024)", "Thompson et al. (2023)")
sample_types <- c("Plasma", "Plasma", "Plasma", "Whole blood", "Whole blood", "Whole blood")

data_base <- "./mgs-analysis"

data_dir <- file.path(data_base, datasets)
input_dirs <- file.path(data_dir, "/input")
results_dirs <- file.path(data_dir, "/results")
qc_dirs <- file.path(results_dirs, "qc")
hv_dirs <- file.path(results_dirs, "hv")
libraries_paths <- file.path(input_dirs, "libraries.csv")
basic_stats_paths <- file.path(qc_dirs, "qc_basic_stats.tsv.gz")
out_dir <- "./figures"
```

```{r}
#| label: prepare-plotting-template

# Not sure if this section is even needed anymore
classifications <- c("Unassigned", "Human","Bacterial", "Archaeal", "Viral")

# Prepare plotting templates
g_comp_base <- ggplot(mapping=aes(x=dataset, y=p_reads, fill=classification)) +
  scale_x_discrete(name="") +
  theme_kit + 
  theme(plot.title = element_text(hjust=0, face="plain", size=rel(1.5))) +
  facet_grid(sample_type ~ ., scales = "free_y")

g_comp_base_study <- ggplot(mapping=aes(x=sample, y=p_reads, fill=classification)) +
  scale_x_discrete(name="") +
  theme_kit + 
  theme(plot.title = element_text(hjust=0, face="plain", size=rel(1.5))) +
  facet_grid(dataset ~ ., scales = "free_y")

scale_y_pc_reads <- purrr::partial(scale_y_continuous, name = "% Reads",
                                   expand = c(0,0), labels = function(y) sprintf("%.0f%%", y*100))
geom_comp <- purrr::partial(geom_col, position = "stack", width = 0.75)

# Define a color palette for the classification
classification_colors <- brewer.pal(8, "Accent")
names(classification_colors) <- classifications
scale_fill_classification <- function() {
  scale_fill_manual(values = classification_colors, name = "Classification")
}
```

# Remove low-quality sample, contaminants, and spike-ins
```{r}
#| label: load-libraries

# Remove sample with low read number
low_sample_number <- c('SRR21924256')

libraries <- purrr::map2(libraries_paths, seq_along(datasets), ~read_csv(.x, show_col_types = FALSE) %>% mutate(dataset = datasets[.y], sample_type = sample_types[.y])) %>% bind_rows() %>%
  mutate(sample_type = factor(sample_type)) %>%
  mutate(dataset = factor(dataset, levels = datasets)) %>%
  filter(!sample %in% low_sample_number)
```

```{r}
#| label: import-stats

basic_stats <- lapply(basic_stats_paths, read_tsv, show_col_types = FALSE) %>%
  bind_rows() %>%
  inner_join(libraries, by="sample") %>% arrange(sample) %>%
  mutate(stage = factor(stage, levels = c("raw_concat", "cleaned", "dedup", "ribo_initial", "ribo_secondary")),
         sample = fct_inorder(sample)) %>%
  filter(!sample %in% low_sample_number)

basic_stats_raw <- basic_stats %>% 
  filter(stage == "raw_concat") %>%
  mutate(dataset = factor(dataset, levels = datasets, labels = formatted_datasets))

raw_read_counts <- basic_stats_raw %>% 
  group_by(dataset) %>%
   summarize(rmin = min(n_read_pairs), rmax=max(n_read_pairs),
             rmean=mean(n_read_pairs), 
             rtot = sum(n_read_pairs),
             btot = sum(n_bases_approx),
             dmin = min(percent_duplicates), dmax=max(percent_duplicates),
             dmean=mean(percent_duplicates), .groups = "drop")
```

```{r}
#| label: prepare-hv
#| cache-lazy: false

# Get viral taxonomy
viral_taxa <- read_tsv("./resources/total-virus-db.tsv.gz", show_col_types = FALSE)

# Import and format reads
hv_reads_path <- file.path(hv_dirs, "hv_hits_putative_collapsed.tsv.gz")
mrg_hv_raw <- lapply(hv_reads_path, read_tsv, show_col_types = FALSE)

mrg_hv_raw <- lapply(mrg_hv_raw, function(df) {
  df %>% mutate(taxid = as.character(taxid))
})

# Remove out reads that don't follow our critiera 
mrg_hv_without_kraken_filter <- mrg_hv_raw %>%
  bind_rows() %>%
  inner_join(libraries, by="sample") %>% arrange(sample) %>%
  mutate(kraken_label = ifelse(assigned_hv, "Kraken2 HV assignment",
                               "No Kraken2 assignment")) %>%
  mutate(adj_score_max = pmax(adj_score_fwd, adj_score_rev),
         highscore = adj_score_max >= 20,
         hv_status = assigned_hv | highscore) %>%
  rename(taxid_all = taxid, taxid = taxid_best)

mrg_hv_with_spike_in <- mrg_hv_without_kraken_filter %>% 
  filter(assigned_name != "unclassified")
mrg_hv_kraken_unclassified <- mrg_hv_without_kraken_filter %>%
  filter(assigned_name == "unclassified")
sprintf("There were a total of %d putatitve HV reads. After removing the %d unclassified reads by Kraken2, we get a total of %d putative HV reads that we conduct the rest of the analysis on.", nrow(mrg_hv_without_kraken_filter), nrow(mrg_hv_kraken_unclassified), nrow(mrg_hv_with_spike_in))
```

```{r}
#| label: proportion-of-unclassified reads
#| cache-lazy: false
mrg_hv_without_kraken_filter %>%
  summarize(
    .by = c("sample_type", "dataset"),
    `Proportion of reads classified by Kraken2` = mean(assigned_name != "unclassified")
  ) %>% rename(`Sample Type` = sample_type, `Dataset` = dataset)

mrg_hv_without_kraken_filter %>%
  summarize(
    .by = c("sample_type"),
    `Proportion of reads classified by Kraken2` = mean(assigned_name != "unclassified")
  ) %>% rename(`Sample Type` = sample_type)
```

```{r}
#| label: raise-hv-taxa-temp
#| cache-lazy: false

# Filter samples and add viral taxa information
mrg_hv_named_with_spike_in <- mrg_hv_with_spike_in %>% left_join(viral_taxa, by="taxid") 

# Discover viral species & genera for HV reads
raise_rank <- function(read_db, taxid_db, out_rank = "species", verbose = FALSE){
   # Get higher ranks than search rank
   ranks <- c("subspecies", "species", "subgenus", "genus", "subfamily", "family", "suborder", "order", "class", "subphylum", "phylum", "kingdom", "superkingdom")
   rank_match <- which.max(ranks == out_rank)
   high_ranks <- ranks[rank_match:length(ranks)]
   # Merge read DB and taxid DB
   reads <- read_db %>% select(-parent_taxid, -rank, -name) %>%
     left_join(taxid_db, by="taxid")
   # Extract sequences that are already at appropriate rank
   reads_rank <- filter(reads, rank == out_rank)
   # Drop sequences at a higher rank and return unclassified sequences
   reads_norank <- reads %>% filter(rank != out_rank, !rank %in% high_ranks, !is.na(taxid))
   while(nrow(reads_norank) > 0){ # As long as there are unclassified sequences...
     # Promote read taxids and re-merge with taxid DB, then re-classify and filter
     reads_remaining <- reads_norank %>% mutate(taxid = parent_taxid) %>%
       select(-parent_taxid, -rank, -name) %>%
       left_join(taxid_db, by="taxid")
     reads_rank <- reads_remaining %>% filter(rank == out_rank) %>%
       bind_rows(reads_rank)
     reads_norank <- reads_remaining %>%
       filter(rank != out_rank, !rank %in% high_ranks, !is.na(taxid))
   }
   # Finally, extract and append reads that were excluded during the process
   reads_dropped <- reads %>% filter(!seq_id %in% reads_rank$seq_id)
   reads_out <- reads_rank %>% bind_rows(reads_dropped) %>%
     select(-parent_taxid, -rank, -name) %>%
     left_join(taxid_db, by="taxid")
   return(reads_out)
 }
# Raise to family level to filter out spike-ins
hv_reads_family <- raise_rank(mrg_hv_named_with_spike_in, viral_taxa, "family")

# Filter out reads in Microviridae and Rhabdoviridae from dataset.
filter_seq_ids <-hv_reads_family %>%
  filter(dataset == "cebriamendoza2021" & name %in% c("Microviridae", "Rhabdoviridae")) %>% 
  pull(seq_id)

remove_reads <- hv_reads_family %>%
  filter(dataset == "cebriamendoza2021" & name %in% c("Microviridae", "Rhabdoviridae")) %>%
  group_by(sample) %>%
  count(name = "n_reads_removed")

basic_stats_raw <- basic_stats_raw %>%
  left_join(remove_reads) %>%
  mutate(n_read_pairs = ifelse(is.na(n_reads_removed), n_read_pairs, n_read_pairs - n_reads_removed))

mrg_hv <- mrg_hv_with_spike_in %>%
  filter(!seq_id %in% filter_seq_ids)

# Filter out Coronavirus reads by raising to species level
hv_reads_species <- raise_rank(mrg_hv_named_with_spike_in, viral_taxa, "species")

# Filter out SARS-CoV-2 reads from datasets that we expect to have contamination (the samples were collected pre-COVID-19)
filter_seq_ids_corona <-hv_reads_species %>%
  filter(name == "Severe acute respiratory syndrome-related coronavirus" & dataset %in% c("mengyi2023", "thijssen2023")) %>% 
  pull(seq_id)

remove_reads_corona <- hv_reads_species %>%
  filter(name == "Severe acute respiratory syndrome-related coronavirus" & dataset %in% c("mengyi2023", "thijssen2023")) %>%
  group_by(sample) %>%
  count(name = "n_reads_removed")

basic_stats_raw <- basic_stats_raw %>%
  left_join(remove_reads_corona) %>%
  mutate(n_read_pairs = ifelse(is.na(n_reads_removed), n_read_pairs, n_read_pairs - n_reads_removed))

mrg_hv <- mrg_hv %>%
  filter(!seq_id %in% filter_seq_ids_corona)

# Add viral taxonomy
mrg_hv_named <- mrg_hv %>% left_join(viral_taxa, by="taxid")

raw_read_counts <- basic_stats_raw %>% 
  group_by(dataset) %>%
   summarize(rmin = min(n_read_pairs), rmax=max(n_read_pairs),
             rmean=mean(n_read_pairs), 
             rtot = sum(n_read_pairs),
             btot = sum(n_bases_approx),
             dmin = min(percent_duplicates), dmax=max(percent_duplicates),
             dmean=mean(percent_duplicates), .groups = "drop")
```

# Kingdom-level composition
```{r}
#| label: kingdom-fraction-plot
#| warning: false
#| fig-width: 15
#| fig-height: 7.5
#| fig-cap: "**Table 2**: Kingdom-level taxonomic composition showing percentage of reads assigned to each kingdom after random subsampling to 1 million read pairs per sample. (Rounding from paper has not been applied here.)"

# Import composition data
tax_final_dirs <- file.path(results_dirs, "taxonomy_final")
comp_paths <- file.path(tax_final_dirs, "taxonomic_composition.tsv.gz")

comp <- lapply(comp_paths, read_tsv, show_col_types = FALSE) %>% bind_rows() %>%
  inner_join(libraries, by='sample')

comp <- comp %>% left_join(remove_reads) %>%
  mutate(n_reads = case_when(
    classification == "Viral" & !is.na(n_reads_removed) ~ n_reads - n_reads_removed,
    TRUE ~ n_reads
  ))

dataset_comp <- comp %>%
  filter(classification %in% classifications) %>%
  group_by(dataset, classification) %>%
  summarize(n_reads = sum(n_reads), .groups = "drop_last") %>%
  ungroup() %>%
  group_by(dataset) %>%
  mutate(total_reads = sum(n_reads)) %>%
  ungroup() %>%
  group_by(dataset, classification) %>%
  mutate(p_reads = n_reads / total_reads) %>%
  select(dataset, classification, p_reads) %>%
  ungroup() %>%
  left_join(libraries[3:4] %>% unique(), by="dataset") %>%
  mutate(dataset = factor(dataset, levels = datasets, labels = formatted_datasets))

dataset_comp_summ <- dataset_comp %>% 
  mutate(p_reads = base::signif(p_reads*100, 4)) %>%
  pivot_wider(names_from = classification, values_from = p_reads)

dataset_comp_summ
```

# Human-infecting viruses
```{r}
#| label: count-hv-reads
#| fig-width: 15
#| fig-height: 7.5
#| warning: false
#| fig-cap: "**Figure 1**: Distribution of human-infecting virus relative abundance across all samples in six studies. Each point represents a single sample. Boxplots show the distribution including samples with zero HV reads (box: 25th-75th percentiles, line: median, whiskers: extend to 1.5Ã interquartile range). For studies with many zeros, the median and potentially the entire boxplot may collapse to zero. Numbers underneath the study names denote the percentage of samples with at least one HV read. "

read_counts_raw <- filter(basic_stats_raw) %>%
  dplyr::select(sample, n_reads_raw = n_read_pairs)

read_counts_hv <- mrg_hv %>% filter(hv_status) %>% 
  group_by(sample) %>% 
  count(name="n_reads_hv")

read_counts <- read_counts_raw %>%
  left_join(read_counts_hv, by=c("sample")) %>%
  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%
  inner_join(libraries, by=c("sample")) %>%
  mutate(p_reads = n_reads_hv/n_reads_raw) %>% 
  select(!library) %>%
  mutate(dataset = factor(dataset, levels = rev(datasets), labels = rev(formatted_datasets)))

# Calculate percentages of samples with/without viral reads
binary_read_counts <- read_counts %>% 
  mutate(has_virus = ifelse(p_reads > 0, "Virus detected", "No virus detected")) %>% 
  group_by(dataset, has_virus) %>% 
  summarise(count = n(), .groups = "drop") %>%
  group_by(dataset) %>%
  mutate(
    percentage = count / sum(count),
    dataset = factor(dataset, levels = formatted_datasets, labels = formatted_datasets)
  )

read_counts <- read_counts %>% mutate(dataset = factor(dataset, levels = rev(formatted_datasets)))
binary_information <- binary_read_counts %>% filter(has_virus == "Virus detected") %>% select(dataset,percentage) %>% mutate(dataset = factor(dataset, levels = rev(formatted_datasets)))

read_counts <- read_counts %>% left_join(binary_information, by="dataset") %>% mutate(dataset = sprintf("%s\n%.0f%%", dataset, percentage*100)) %>% mutate(dataset = factor(dataset,levels = c("CebriÃ¡-Mendoza et al. (2021)\n98%", "Thijssen et al. (2023)\n100%","Mengyi et al. (2023)\n87%","Aydillo et al. (2022)\n25%","O'Connell (2024)\n24%", "Thompson et al. (2023)\n43%")))

zero_read_counts <- read_counts %>% filter(p_reads == 0) 
nonzero_read_counts <- read_counts %>% filter(p_reads > 0) 

g_all_dot <- ggplot(read_counts, aes(x=dataset, y=p_reads+1e-9, fill = sample_type)) +
  geom_quasirandom(data = nonzero_read_counts) +
  geom_jitter(data = zero_read_counts, width = 0.25) +
  geom_boxplot(width = 0.5, alpha = 0.8, outliers = FALSE, aes(fill = sample_type)) +
  scale_y_log10(labels = function(x) {
      ifelse(x == 1e-9, expression(0 ~ phantom({}^{-9})), label_log(digits = 3)(x))
    }, breaks = c(1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1)) +
  scale_x_discrete(limits = rev) +
  labs(title = "", x = "", y = "Relative abundance") +
  coord_flip() +
  scale_fill_discrete(name = "Sample Type") +
  theme_bw() + 
  theme(
    axis.text.y = element_text(size = 14),
    axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5, vjust = 1),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.ticks.y = element_blank(),
    axis.line.x = element_line(size = 1, color = "black"),
    axis.ticks.x = element_line(size = 1, color = "black"),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 14),
    legend.spacing.x = unit(1, 'cm'),
    legend.position = c(0.8, 0.2),
    legend.background = element_rect(fill = "white", color = "gray", size = 0.5),
    legend.margin = margin(t = 10, r = 10, b = 10, l = 10),
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    plot.margin = unit(c(5.5, 5.5, 5.5, 5.5), "points"),
  ) 
g_all_dot
ggsave(file.path(out_dir, "/figure_1.png"), g_all_dot, width = 12.5, height = 5.5, dpi=320)
```

```{r}
#| label: extract-genus-reads
#| cache-lazy: false
hv_reads_family <- raise_rank(mrg_hv_named, viral_taxa, "family")
hv_reads_genus <- raise_rank(mrg_hv_named, viral_taxa, "genus")
```

```{r}
#| label: explore-hv-family-sample-type
#| fig-width: 15
#| fig-height: 7.5
#| cache-lazy: false 
#| fig-cap: "**Figure 2**: Distribution of human-infecting virus families across datasets, showing the average relative abundance of each viral family per dataset. Families contributing less than 5% to any single dataset are grouped into the 'Other' category."

threshold_major_family <- 0.05

# Create vector of bacteriophage family names to remove
bacteriophage_families <- c("Microviridae", "Caudovirus D_HF5_3", 
                           "Caudovirus D_HF2_7", "Inoviridae",
                           "Hudisavirus sp.", "Intestiviridae")

# Count reads for each human-viral family
hv_family_counts <- hv_reads_family %>% 
  filter(!name %in% bacteriophage_families) %>%
  group_by(name, taxid, dataset) %>%
  count(name = "n_reads_hv") %>%
  group_by(dataset) %>%
  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))

# Identify high-ranking families and group others
hv_family_major_tab <- hv_family_counts %>% group_by(name) %>% 
  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%
  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)
hv_family_counts_major <- hv_family_counts %>%
  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, "Other")) %>%
  group_by(dataset, name_display) %>%
  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), 
            .groups="drop") %>%
  mutate(name_display = factor(name_display, 
                               levels = c(hv_family_major_tab$name, "Other")))
hv_family_counts_display <- hv_family_counts_major %>%
  rename(p_reads = p_reads_hv, classification = name_display) %>%
  left_join(libraries[3:4] %>% unique(), by="dataset") %>%
  mutate(dataset = factor(dataset, levels = datasets, labels = formatted_datasets))

# Get most prominent families for text
hv_family_collate <- hv_family_counts %>%
  group_by(name, taxid, dataset) %>% 
  summarize(n_reads_tot = sum(n_reads_hv),
            p_reads_max = max(p_reads_hv), .groups="drop") %>% 
  arrange(desc(n_reads_tot))

# Convert the factor to a character vector
hv_family_counts_display$classification <- as.character(hv_family_counts_display$classification)

order <- c("Anelloviridae", "Flaviviridae", "Adenoviridae", "Papillomaviridae", "Parvoviridae", "Orthoherpesviridae", "Retroviridae", "Other")

hv_family_counts_display <- hv_family_counts_display %>% mutate(classification = factor(classification, levels = order))

light_palette_paul_tor <- c('#77AADD', '#EE8866', '#EEDD88', '#FFAABB', '#99DDFF', '#44BB99', '#BBCC33', '#AAAA00', '#DDDDDD')

# Get all unique classifications except "Other"
non_other_classes <- hv_family_counts_display %>% 
  filter(classification != "Other") %>% 
  pull(classification) %>% 
  unique()

# Create color vector with specific order
colors <- c(light_palette_paul_tor[1:(length(light_palette_paul_tor)-2)], # All colors except last
            '#DDDDDD') # Last color for "Other"

hv_family_counts_display <- hv_family_counts_display %>% mutate(dataset = factor(dataset, levels = rev(formatted_datasets)))

#g_hv_family <- g_comp_base + 
g_hv_family <-  ggplot(mapping=aes(x=dataset, y=p_reads, fill=classification)) +
  scale_x_discrete(name="") +
  ggforce::facet_col(~sample_type, scales = "free_y", space = "free")+
  geom_col(data=hv_family_counts_display, position = "stack", width=0.75) +
  scale_y_continuous(name="% HV Reads", limits=c(0,1.00), 
                     breaks = seq(0,1,0.2),
                     expand=c(0,0), labels = function(y) sprintf("%.0f%%", y*100)) +
  scale_fill_manual(values = colors, name = "Family") +
  labs(title="") +
  guides(fill=guide_legend(nrow=1, reverse = TRUE, keywidth = 0.5, keyheight = 0.5)) +
  theme_bw() +
  theme(
    plot.margin = unit(c(0.5, 1.5, 0.5, 0.5), "cm"),
    axis.title.y = element_blank(), # Remove x-axis title
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5, vjust = 1),
    axis.ticks.y = element_blank(), 
    legend.position = "bottom",
    legend.text = element_text(size = 10, face = "italic"),
    legend.title = element_text(size = 12, face = "bold"),
    strip.background = element_rect(
      fill = "#e5e5e5",        # Light gray background
      color = "#e5e5e5",    # No border
    ),
    strip.text = element_text(
      face = "bold",           # Bold text
      color = "#2c3e50",       # Dark blue-gray text
      size = 16                # Larger text size
    )
    ) + 
    coord_flip()
g_hv_family
ggsave(file.path(out_dir, "/figure_2.png"), g_hv_family, width = 12.5, height = 5, dpi=320)
```

```{r}
#| label: explore-hv-family-prevalence-and-abundance
#| fig-width: 15
#| fig-height: 7.5
#| cache-lazy: false 
#| fig-cap: "**Figure 3**: Detection of human-infecting virus (HV) families across whole blood and plasma datasets, including only families found in at least five samples. Left panel: Prevalence of each viral family, shown as the percentage of samples containing at least one viral read. Right panel: Relative abundance of viral families in positive samples. "

dataset_hv_reads_family <- hv_reads_family %>%
  group_by(name, taxid, dataset, sample) %>%
  count(name = "n_reads_hv")

all_dataset_ra <- read_counts_raw %>%
  left_join(dataset_hv_reads_family, by=c("sample")) %>%
  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%
  left_join(libraries, by=c("sample", "dataset")) %>%
  mutate(ra = n_reads_hv / n_reads_raw)

all_family <- all_dataset_ra %>% select(name) %>% drop_na() %>% distinct() %>% pull(name)

# Remove bacteriophage families from the list
all_family <- all_family[!all_family %in% bacteriophage_families]

filtered_dataset_ra <-  all_dataset_ra %>% 
  filter(name %in% all_family)

filtered_dataset_ra <- libraries %>%
  crossing(name = all_family) %>%
  left_join(filtered_dataset_ra, by = c("sample", "dataset", "sample_type", "name")) %>%
  mutate(
    n_reads_hv = coalesce(n_reads_hv, 0),
    ra = coalesce(ra, 0),
    n_reads_raw = coalesce(n_reads_raw, 0)
  ) %>%
  group_by(name) %>%  # Group only by name, not dataset
  filter(sum(n_reads_hv > 0) >= 5) %>%  # Count samples across all datasets
  ungroup()

filtered_dataset_ra <- filtered_dataset_ra %>% mutate(dataset = factor(dataset, levels = rev(datasets), labels = rev(formatted_datasets)))

# Once again, we filter for samples with 0 reads
g_hv_family <- ggplot(filtered_dataset_ra %>% filter(ra > 0), aes(x = name, y = ra, color = dataset, fill=dataset)) +
  geom_quasirandom(
    method = "quasirandom", 
    size = 1, 
    shape = 21, 
    stroke = 1,
  ) +
  scale_y_log10("Relative abundance in positive samples", labels = label_log(digits = 3), breaks = c(1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1)) + 
  coord_flip() +
  scale_fill_brewer(palette = "RdYlBu", direction = -1, name = "Dataset") +
  scale_color_brewer(palette = "RdYlBu", direction = -1, name = "Dataset") +
  labs(x = "", y = "") +
  guides(color = guide_legend(reverse = TRUE, override.aes = list(size = 4)), 
         fill = guide_legend(reverse = TRUE, override.aes = list(size = 4))) +
  theme_bw() +
  theme(
    text = element_text(family = "Arial"),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 14),
    axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank(),
    axis.line.x = element_line(color = "black", size = 1),
    axis.ticks.x = element_line(color = "black", size = 1),
    axis.ticks.length.x = unit(0.25, "cm"),
    legend.position = c(0.75, 0.85),
    legend.background = element_rect(fill = "white", color = "gray", size = 0.5),
    legend.margin = margin(t = 10, r = 10, b = 10, l = 10)
  )
#g_hv_family

virus_prevalence <- filtered_dataset_ra %>%
  group_by(dataset, name, sample_type) %>%
  summarize(
    total_samples = n(),
    positive_samples = sum(n_reads_hv > 0),
    prevalence_percent = (positive_samples / total_samples),
    .groups = 'drop'
  )

g_virus_prevalence <- ggplot(virus_prevalence, aes(x = prevalence_percent, y = name, fill = dataset)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.75) +
  scale_x_continuous(
    name = "Fraction positive samples", 
    trans = "sqrt",
    breaks = c(0, 0.01, 0.1, 0.25, 0.5, 0.75, 1),
    labels = scales::percent_format(accuracy = 1),
    limits = c(0, 1)
  ) +
  scale_fill_brewer(palette = "RdYlBu", direction = -1) +
  guides(fill=guide_legend(reverse = TRUE)) +
  theme_bw() + 
  theme(
    text = element_text(family = "Arial"),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 14),
    axis.text.y = element_text(size = 14, face = "italic"),
    axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_blank(),
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.line.x = element_line(color = "black", size = 1),
    axis.ticks.x = element_line(color = "black", size = 1),
    axis.ticks.length.x = unit(0.25, "cm"),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),  
    panel.spacing = unit(0.1, "lines")  # Reduce space between facets
  )
#g_virus_prevalence
joint_plot <- ggarrange(g_virus_prevalence + theme(legend.position = "none"), g_hv_family + theme(axis.text.y=element_blank()), 
                        ncol = 2, nrow = 1, align = "h", common.legend = FALSE,
                        widths = c(1, 1.25))  # Adjust the widths to make the first plot wider
joint_plot
ggsave(file.path(out_dir, "/figure_3.png"), joint_plot, width = 13, height = 8.5, dpi=320)
```

# Appendix

```{r}
#| label: explore-hv-genus-prevalence-and-abundance
#| fig-width: 15
#| fig-height: 15
#| cache-lazy: false 
#| fig-cap: "**Figure A2**: Human- infecting virus genera variation across samples in each dataset. Left: Percentage of samples in each dataset that have reads from the human-infecting genera. Right: Relative abundance of human-infecting genera in each dataset (filtered for genera found in >5 samples)."


# Create vector of bacteriophage names to remove; some of these are already removed earlier so this is partially redundant
bacteriophages <- c("Microvirus sp.", "Microviridae sp.", 
                   "Caudovirus D_HF5_3", "Gokushovirus WZ-2015a",
                   "Caudovirus D_HF2_7", "Inovirus",
                   "Human gut gokushovirus")

dataset_hv_reads_genus <- hv_reads_genus %>%
  left_join(hv_reads_family %>% select(name, seq_id) %>% rename("family"="name"), by=c("seq_id")) %>%
  group_by(name, taxid, dataset, sample, family) %>%
  count(name = "n_reads_hv") %>%
  ungroup()

all_dataset_ra <- read_counts_raw %>%
  left_join(dataset_hv_reads_genus, by=c("sample")) %>%
  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%
  left_join(libraries, by=c("sample", "dataset")) %>%
  mutate(ra = n_reads_hv / n_reads_raw)

all_genus <- all_dataset_ra %>% select(name) %>% drop_na() %>% distinct() %>% pull(name)
all_genus <- all_genus[!all_genus %in% bacteriophages]

genera_specific_dataset_ra <- all_dataset_ra %>% 
  filter(name %in% all_genus)

# Create a reference table for genus names
genus_reference <- dataset_hv_reads_genus %>%
  ungroup() %>%
  select(name, taxid, family) %>%
  distinct()

filtered_dataset_ra <- libraries %>%
  crossing(name = all_genus) %>%
  left_join(genera_specific_dataset_ra, by = c("sample", "dataset","sample_type", "name", "library")) %>%
  mutate(
    n_reads_hv = coalesce(n_reads_hv, 0),
    ra = coalesce(ra, 0),
    n_reads_raw = coalesce(n_reads_raw, 0)
  ) %>%
  group_by(name) %>%  # Group only by name, not dataset
  filter(sum(n_reads_hv > 0) >= 5) %>%  # Count samples across all datasets
  ungroup() %>%
  left_join(genus_reference, by="name") %>%
  select(-taxid.x, -family.x) %>%
  rename(taxid=taxid.y, family=family.y) %>% 
  left_join(read_counts_raw, by=c("sample")) %>%
  select(-n_reads_raw.x) %>%
  rename(n_reads_raw=n_reads_raw.y)

filtered_dataset_ra <- filtered_dataset_ra %>%
  mutate(family = factor(family, levels = sort(unique(family), decreasing = TRUE)))


filtered_dataset_ra <- filtered_dataset_ra %>% mutate(dataset = factor(dataset, levels = rev(datasets), labels = rev(formatted_datasets)))

g_hv_genus <- ggplot(filtered_dataset_ra %>% filter(ra > 0), aes(x = name, y = ra, fill = dataset, color = dataset)) +
  geom_quasirandom(
    method = "quasirandom", 
    size = 1, 
    shape = 21, 
    stroke = 1,
  ) +
  scale_y_log10("Relative abundance in positive samples", labels = label_log(digits = 3), breaks = c(1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1)) + 
  coord_flip() +
  scale_fill_brewer(palette = "RdYlBu", direction = -1, name = "Dataset") +
  scale_color_brewer(palette = "RdYlBu", direction = -1, name = "Dataset") +
  guides(color = guide_legend(reverse = TRUE, override.aes = list(size = 4)), 
         fill = guide_legend(reverse = TRUE, override.aes = list(size = 4))) +
  ggforce::facet_col(~family, scales = "free_y", space = "free")+
  labs(x = "", y = "") +
  theme_bw() +
  theme(
    text = element_text(family = "Arial"),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 14),
    axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank(),
    axis.line.x = element_line(color = "black", size = 1),
    axis.ticks.x = element_line(color = "black", size = 1),
    axis.ticks.length.x = unit(0.25, "cm"),
    strip.background = element_rect(
      fill = "#e5e5e5",        # Light gray background
      color = "#e5e5e5",    # No border
    ),
    strip.text = element_text(
      face = "bold",           # Bold text
      color = "#2c3e50",       # Dark blue-gray text
      size = 14                # Larger text size
    ),
    legend.position = c(0.75, 0.40),
    legend.background = element_rect(fill = "white", color = "gray", size = 0.5),
    legend.margin = margin(t = 10, r = 10, b = 10, l = 10)
  )
#g_hv_genus

virus_prevalence <- filtered_dataset_ra %>%
  group_by(dataset, name, sample_type, family) %>%
  summarize(
    total_samples = n(),
    positive_samples = sum(n_reads_hv > 0),
    prevalence_percent = (positive_samples / total_samples),
    .groups = 'drop'
  )

g_virus_prevalence <- ggplot(virus_prevalence, aes(x = prevalence_percent, y = name, fill = dataset)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_x_continuous(
    name = "Fraction positive samples", 
    trans = "sqrt",
    breaks = c(0, 0.01, 0.1, 0.25, 0.5, 0.75, 1),
    labels = scales::percent_format(accuracy = 1),
    limits = c(0, 1)
  ) +
  ggforce::facet_col(~family, scales = "free_y", space = "free")+
  scale_fill_brewer(palette = "RdYlBu", direction = -1) +
  guides(fill=guide_legend(reverse = TRUE)) +
  theme_bw() + 
  theme(
    text = element_text(family = "Arial"),
    legend.title = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 14),
    axis.text.y = element_text(size = 14, face = "italic"),
    axis.text.x = element_text(size = 14, angle = 0, hjust = 0.5),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_blank(),
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.line.x = element_line(color = "black", size = 1),
    axis.ticks.x = element_line(color = "black", size = 1),
    axis.ticks.length.x = unit(0.25, "cm"),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),  
    panel.spacing = unit(0.1, "lines"),  # Reduce space between facets
    legend.position = "none",
    strip.background = element_rect(
      fill = "#e5e5e5",        # Light gray background
      color = "#e5e5e5",    # No border
    ),
    strip.text = element_text(
      face = "bold",           # Bold text
      color = "#2c3e50",       # Dark blue-gray text
      size = 14                # Larger text size
    )
  )
#g_virus_prevalence
joint_plot <- ggarrange(g_virus_prevalence + theme(legend.position = "none"), g_hv_genus + theme(axis.text.y=element_blank()), 
                        ncol = 2, nrow = 1, align = "h", common.legend = FALSE,
                        widths = c(1, 1.25))  # Adjust the widths to make the first plot wider
joint_plot
ggsave(file.path(out_dir, "/figure_A2.png"), joint_plot, width = 13, height = 15, dpi=320)
```
